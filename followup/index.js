// followup/index.js

const questionSets = require('./questionSets');
const handleFollowupAnswers = require('./followupRouter');
const memoryManager = require('./memoryManager');
const sendGPTResponse = require('./responseSender');

// „É¶„Éº„Ç∂„Éº„ÅÆÈÄ≤Ë°åÁä∂ÊÖã„ÇíË®òÈå≤
const userSession = {}; // userSession[userId] = { step: 1, answers: [] }

async function handleFollowup(event, client, userId) {
  try {
    const message = event.message.text.trim();

    // Ë®∫Êñ≠ÈñãÂßã„Éà„É™„Ç¨„ÉºÔºàÊâãÂãï„ÅßÂ§âÊõ¥„Åó„Å¶OKÔºâ
    if (message === '„Å®„Å®„ÅÆ„ÅÜË®àÁîª') {
      userSession[userId] = { step: 1, answers: [] };

      const q1 = questionSets[0]; // Q1„ÇíÂá∫„Åô
      return [buildFlexMessage(q1)];
    }

    // „Çª„ÉÉ„Ç∑„Éß„É≥„Åå„Å™„ÅÑ or ÁÑ°Âäπ
    if (!userSession[userId]) {
      return [{
        type: 'text',
        text: 'Ë®∫Êñ≠„ÇíÂßã„ÇÅ„Çã„Å´„ÅØ„Äå„Å®„Å®„ÅÆ„ÅÜË®àÁîª„Äç„Å®ÈÄÅ„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
      }];
    }

    const session = userSession[userId];

    // ÁèæÂú®„ÅÆË≥™Âïè„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ
    const currentStep = session.step;
    const question = questionSets[currentStep - 1];

    // ÂÖ•Âäõ„Åï„Çå„ÅüÁ≠î„ÅàÔºàA„ÄúEÔºâ„Å†„Åë„ÇíÊäΩÂá∫
    const answer = message.trim().charAt(0).toUpperCase();
    const isValid = question.options.some(opt => opt.startsWith(answer));

    if (!isValid) {
      return [{
        type: 'text',
        text: 'A„ÄúE„ÅÆ‰∏≠„Åã„ÇâÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ„ÄÇ'
      }];
    }

    // ÂõûÁ≠î„ÇíË®òÈå≤
    if (question.id === 'Q3') {
      // Q3„ÅÆ„ÅøË§áÊï∞ÈÅ∏ÊäûÂØæÂøú„Å™„ÇâÊã°ÂºµÔºà‰ªäÂõû„ÅØÂçòÁ¥î„Å´1ÂõûÁ≠î„ÅÆ„ÅøÔºâ
      session.answers.push({
        habits: answer,
        stretch: answer,
        breathing: answer,
        kampo: answer,
        other: answer
      });
    } else {
      session.answers.push(answer);
    }

    session.step++;

    // „Åô„Åπ„Å¶„ÅÆË≥™Âïè„ÅåÁµÇ„Çè„Å£„Åü„ÇâË®∫Êñ≠„Å∏
    if (session.step > questionSets.length) {
      const answers = session.answers;
      const memory = memoryManager.getUserData(userId) || {};
      const context = {
        symptom: memory.symptom || '‰Ωì„ÅÆ‰∏çË™ø',
        motion: memory.motion || 'ÁâπÂÆö„ÅÆÂãï‰Ωú',
      };

      const result = await handleFollowupAnswers(userId, answers);
      const gptReply = await sendGPTResponse(result.promptForGPT);

      delete userSession[userId]; // „Çª„ÉÉ„Ç∑„Éß„É≥Á†¥Ê£Ñ

      return [{
        type: 'text',
        text: 'üìã„Äê‰ªäÂõû„ÅÆÂÜçË®∫ÁµêÊûú„Äë\n' + gptReply
      }];
    }

    // Ê¨°„ÅÆË≥™Âïè„ÇíËøî„Åô
    const nextQuestion = questionSets[session.step - 1];
    return [buildFlexMessage(nextQuestion)];

  } catch (err) {
    console.error('‚ùå followup/index.js „Ç®„É©„Éº:', err);
    return [{
      type: 'text',
      text: 'Ë®∫Êñ≠‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶„Äå„Å®„Å®„ÅÆ„ÅÜË®àÁîª„Äç„Å®ÈÄÅ„Å£„Å¶ÂÜçÈñã„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
    }];
  }
}

// Flex„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÁµÑ„ÅøÁ´ã„Å¶„ÇãÈñ¢Êï∞ÔºàÈÅ∏ÊäûËÇ¢A„ÄúEÔºâ
function buildFlexMessage(question) {
  return {
    type: 'flex',
    altText: question.header,
    contents: {
      type: 'bubble',
      size: 'mega',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [{
          type: 'text',
          text: question.header,
          weight: 'bold',
          size: 'md',
          color: '#ffffff',
        }],
        backgroundColor: '#788972',
        paddingAll: '12px',
      },
      body: {
        type: 'box',
        layout: 'vertical',
        spacing: 'md',
        contents: [
          {
            type: 'text',
            text: question.body,
            wrap: true,
            color: '#333333',
            size: 'md',
          },
          {
            type: 'separator',
            margin: 'md',
          },
          ...question.options.map(option => {
            const label = option;
            const data = option.charAt(0); // A„ÄúE„ÅÆ„ÅøÈÄÅ‰ø°
            return {
              type: 'button',
              action: {
                type: 'postback',
                label,
                data,
                displayText: label,
              },
              style: 'primary',
              height: 'sm',
              margin: 'sm',
              color: '#828E7B',
            };
          })
        ],
      },
    },
  };
}

module.exports = handleFollowup;
